    MST-KRUSKAL(G, w)
    1.	A ← Ø
    2.	for each vertex v  V[G]
    3.		do MAKE-SET(v)
    4.	sort the edges of E into nondecreasing order by weight w
    5.	for each edge (u, v)  E, taken in nondecreasing order by weight
    6.		do if FIND-SET(u) ≠ FIND-SET(v)
    7.			then A ← A  {(u, v)}
    8.				UNION(u, v)
    9.	return A
    
    //=========================
    01.
/**
02.
* Kruskal's algorithm
03.
* @param graph graph
04.
* @param w weight vector of the edges
05.
* @return minimum spanning tree
06.
*/
07.
SpanningTree kruskalAlgorithm(Graph graph, weights w)
08.
SpanningTree tree
09.
for Node n : graph do
10.
makeSet(n) //every edge is considered as a separate component
11.
List edges = sort(graph.getEdges(), w) //order the edges according to their weight in ascending order
12.
 
13.
for Edge e in edges do
14.
if findSet(e.start) != findSet(e.end) //if the source and target are in different components, than we are not creating a cycle
15.
tree.add(e) //add the edge to the spanning tree
16.
union(e.start, e.end) //merge the connected components
17.
if tree.edgeCount() == graph.nodeCount() - 1 //if the spanning tree is complete
18.
break //terminate the algorithm
19.
return tree
